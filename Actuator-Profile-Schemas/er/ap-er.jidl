       title: "OpenC2 Endpoint Response Actuator Profile"
      module: "https://oasis-open.org/openc2/ap-er/v1.0"
     imports: {"ls": "https://oasis-open.org/openc2/oc2ls-types/v1.1"}
     exports: ["AP-Target", "AP-Args", "AP-Specifiers", "AP-Results"]
     comment: "Combine Language schema with one or more AP schemas to produce Device schema"

Action = Enumerated     // Section 2.1.1 Actions
   3 query
   6 deny
   7 contain
   8 allow
   9 start
  10 stop
  11 restart
  15 set
  16 update
  19 create
  20 delete

Target = Enumerated     // Section 2.1.2.1 Common Targets
   3 device
   9 features
  10 file
  13 ipv4_net
  14 ipv6_net
  18 process
1027 er                 // Profile ID from namespace registry

Args = Enumerated
   1 start_time
   2 stop_time
   3 duration
   4 response_requested
1027 er                 // Profile ID from namespace registry

Actuator = Enumerated
1027 er                 // Profile ID from namespace registry

Results = Enumerated
   1 versions
   2 profiles
   3 pairs
   4 rate_limit
1027 er                 // Profile ID from namespace registry

Pairs = Enumerated      // Profile-defined Action-Target pairs (query features is common to all profiles)
   3 query: /features
   6 deny: file, ipv4_net, ipv6_net
   7 contain: device, file
   8 allow: device, file, ipv4_net, ipv6_net
   9 start: file, process
  10 stop: device, process, /service
  11 restart: device, process
  15 set: ipv4_net, ipv6_net, /registry_entry, /account
  16 update: file
  19 create: /registry_entry
  20 delete: file, /registry_entry, /service

AP-Target = Choice          // Profile-defined targets 2.1.2.2
   1 registry_entry Registry-Entry  // A registry entry applicable to Windows Operating Systems.
   2 account Account        // A user account on an endpoint.
   3 service Service        // A collection of one or more files which holds state information on an endpoint (configurations, execution on boot, utilization of windows registry, or similar).
   4 features AP-Features   // "query features args" does not exist in LS, make it a profile target until it is made common

AP-Features = Enumerated    // Profile-defined feature types
   1 args

Registry-Entry = Record     // 2.1.3-1
   1 path String            // The absolute path of the registry entry including the hive and optionally the key. If the key is not included then the key property MUST be populated.
   2 key String optional    // The registry key. They key may contain subkeys referenced with a backslash to indicate hierarchy.
   3 type WinRegType        // The registry value type as defined in Winnt.h header.
   4 value String optional  // The value of the registry key. The actuator is responsible to format the value in accordance with the defined type.

WinRegType = Enumerated
   0 REG_NONE           // No value type is defined.
   1 REG_SZ             // A string.
   2 REG_EXPAND_SZ      // A string that can contain unexpanded references to environment variables, for example, "%PATH%".
   3 REG_BINARY         // Binary data in any form
   4 REG_DWORD          // A 32-bit number  (Synonym: REG_DWORD_LITTLE_ENDIAN)
   5 REG_DWORD_BIG_ENDIAN   // A 32-bit number in big-endian format
   6 REG_LINK           // Symbolic link to a registry key
   7 REG_MULTI_SZ       // A REG_MULTI_SZ structure
   8 REG_RESOURCE_LIST  // A device driver resource list
  11 REG_QWORD          // A 64-bit number (Synonym: REG_QWORD_LITTLE_ENDIAN)

Account = Map{1..*}         // 2.1.3-2
   1 uid String optional    // The unique identifier of the account.
   2 account_name String optional   // The chosen display name of the account.
   3 directory String optional  // The path to the account's home directory.

Service = Map{1..*}         // 2.1.3-3
   1 executable ls:File optional   // 	The executable file that starts the service.
   2 registry_entries Registry-Entry [0..*] // The registry entries associated with this service.  (fix profile [0..1])
   3 process ls:Process optional   // The process associated with the service (if it is running).

AP-Args = Map{1..*}         // Profile-defined command arguments 2.1.4.2  (Are args required or optional?)
   1 account_status Account-Status
   2 device_contaionment Device-Containment
   3 permitted_addresses Permitted-Addresses

Account-Status = Enumerated     // Use CONSTANT_CASE for constants?
   1 enabled            // Enable the account and render it available on the endpoint.
   2 disabled           // Disable the account and render it unavailable on the endpoint.

Device-Containment = Enumerated
   1 network_isolation  // Isolate the endpoint from communicating with other networked entities, typically through relegation to a private VLAN segment and/or port isolation. MAY be combined with the 'permitted_addresses' Argument to allow communication with select IP or domain name addresses.
   2 app_restriction    // Restrict the execution of applications to only those that are signed by a trusted party (e.g., Microsoft only).
   3 disable_nic        // Disable the Network Interface Controller(s) on the endpoint.

AP-Specifiers = Map     // Profile-defined actuator specifiers 2.1.5
   1 hostname Hostname optional // Specifies a particular endpoint with EDR functionality. This specifier Type is a String which MUST be formatted as an internet host name as specified in [RFC1123]
   2 sensor_id String optional  // Unique identifier for a particular EDR sensor.
   3 named_group String [0..*]  // User defined collection of devices with EDR sensors installed.

AP-Results = Map        // Profile-defined response results
   1 args Query-Args

Query-Args = MapOf(ActionTarget, Args)

ActionTarget = String   // Punt on validating for now